import { Comparator } from '../types';
/**
 *  The `Selection` class provides static methods for sorting an
 *  array using <em>selection sort</em>.
 *  This implementation makes ~ &frac12; <em>n</em><sup>2</sup> compares to sort
 *  any array of length <em>n</em>, so it is not suitable for sorting large arrays.
 *  It performs exactly <em>n</em> exchanges.
 *  <p>
 *  This sorting algorithm is not stable. It uses &Theta;(1) extra memory
 *  (not including the input array).
 *  <p>
 *  For additional documentation, see
 *  <a href="https://algs4.cs.princeton.edu/21elementary">Section 2.1</a>
 *  of <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
 */
export default class Selection<T> {
    /**
     * Rearranges the array in ascending order, using a comparator.
     * @param a the array
     * @param comparator the comparator specifying the order
     */
    static sort<T>(a: any[], comparator?: Comparator<any>): void;
    /**
     * `sort` method implemented `StringComparator`
     * @param a
     */
    static sortString(a: any[]): void;
    /**
     * `sort` method implemented `NumberComparator`
     * @param a
     */
    static sortNumber(a: any[]): void;
    private static less;
    private static exch;
    /**
     * Check if array is sorted - useful for debugging.
     * Is the array sorted from a[lo] to a[hi]
     */
    private static isSorted;
    private static show;
    /**
     * Reads in a sequence of strings from standard input; selection sorts them;
     * and prints them to standard output in ascending order.
     *
     * @param args the command-line arguments
     */
    static main(): void;
}

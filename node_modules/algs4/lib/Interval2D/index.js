"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var StdDraw_1 = tslib_1.__importDefault(require("../StdDraw"));
/**
 *  The `Interval2D` class represents a closed two-dimensional interval,
 *  which represents all points (x, y) with both `xmin <= x <= xmax` and
 *  `ymin <= y <= ymax`.
 *  Two-dimensional intervals are immutable: their values cannot be changed
 *  after they are created.
 *  The class `Interval2D` includes methods for checking whether
 *  a two-dimensional interval contains a point and determining whether
 *  two two-dimensional intervals intersect.
 *  <p>
 *  For additional documentation,
 *  see <a href="https://algs4.cs.princeton.edu/12oop">Section 1.2</a> of
 *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
 */
var Interval2D = /** @class */ (function () {
    function Interval2D(x, y) {
        this._x = x;
        this._y = y;
    }
    /**
     * Returns the area of this two-dimensional interval.
     * @return the area of this two-dimensional interval
     */
    Interval2D.prototype.area = function () {
        return this._x.length() * this._y.length();
    };
    /**
     * Does this two-dimensional interval contain the point p?
     * @param p the two-dimensional point
     * @return true if this two-dimensional interval contains the point p; false otherwise
     */
    Interval2D.prototype.contains = function (p) {
        return this._x.contains(p.x()) && this._y.contains(p.y());
    };
    Interval2D.prototype.x = function () {
        return this._x;
    };
    Interval2D.prototype.y = function () {
        return this._y;
    };
    /**
     * Does this two-dimensional interval intersect that two-dimensional interval?
     * @param that the other two-dimensional interval
     * @return true if this two-dimensional interval intersects
     *    that two-dimensional interval; false otherwise
     */
    Interval2D.prototype.intersects = function (that) {
        if (!this._x.intersects(that.x()))
            return false;
        if (!this._y.intersects(that.y()))
            return false;
        return true;
    };
    /**
     * Draws this two-dimensional interval to standard draw.
     */
    Interval2D.prototype.draw = function () {
        var xc = (this._x.min() + this._x.max()) / 2.0;
        var yc = (this._y.min() + this._y.max()) / 2.0;
        StdDraw_1.default.rectangle(xc, yc, this._x.length() / 2.0, this._y.length() / 2.0);
    };
    return Interval2D;
}());
exports.default = Interval2D;
//# sourceMappingURL=index.js.map
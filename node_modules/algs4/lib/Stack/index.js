"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Node = /** @class */ (function () {
    function Node() {
        this.item = null;
        this.next = null;
    }
    return Node;
}());
exports.Node = Node;
/**
 *  The `Stack` class represents a last-in-first-out (LIFO) stack of generic items.
 *  It supports the usual <em>push</em> and <em>pop</em> operations, along with methods
 *  for peeking at the top item, testing if the stack is empty, and iterating through
 *  the items in LIFO order.
 *  <p>
 *  This implementation uses a singly linked list with a static nested class for
 *  linked-list nodes. See {@link LinkedStack} for the version from the
 *  textbook that uses a non-static nested class.
 *  See {@link ResizingArrayStack} for a version that uses a resizing array.
 *  The <em>push</em>, <em>pop</em>, <em>peek</em>, <em>size</em>, and <em>is-empty</em>
 *  operations all take constant time in the worst case.
 *  <p>
 *  For additional documentation,
 *  see <a href="https://algs4.cs.princeton.edu/13stacks">Section 1.3</a> of
 *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
 *
 *  @param <Item> the generic type of an item in this stack
 */
var Stack = /** @class */ (function () {
    function Stack() {
        this.first = null;
        this.n = 0;
        this.modCount = 0;
    }
    /**
     * Returns true if this stack is empty.
     *
     * @return  true if this stack is empty; false otherwise
     */
    Stack.prototype.isEmpty = function () {
        return this.first == null;
    };
    /**
     * Returns the number of items in this stack.
     *
     * @return  the number of items in this stack
     */
    Stack.prototype.size = function () {
        return this.n;
    };
    /**
     * Adds the item to this stack.
     *
     * @param   item the item to add
     */
    Stack.prototype.push = function (item) {
        this.modCount += 1;
        var oldfirst = this.first;
        this.first = new Node();
        this.first.item = item;
        this.first.next = oldfirst;
        this.n++;
    };
    /**
     * Removes and returns the item most recently added to this stack.
     *
     * @return  the item most recently added
     * @throws Error if this stack is empty
     */
    Stack.prototype.pop = function () {
        this.modCount += 1;
        if (this.isEmpty()) {
            throw new Error('Stack underflow');
        }
        var item = this.first.item;
        this.first = this.first.next;
        this.n--;
        return item;
    };
    /**
     * Returns (but does not remove) the item most recently added to this stack.
     *
     * @return  the item most recently added to this stack
     * @throws Error if this stack is empty
     */
    Stack.prototype.peek = function () {
        if (this.isEmpty()) {
            throw new Error('Stack underflow');
        }
        return this.first.item;
    };
    /**
     * Returns a string representation of this stack.
     *
     * @return  the sequence of items in this stack in LIFO order, separated by spaces
     */
    Stack.prototype.toString = function () {
        var e_1, _a;
        var str = '';
        try {
            for (var _b = tslib_1.__values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
                var node = _c.value;
                str += node + ", ";
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return "Stack [" + str + "]";
    };
    /**
     * Returns an iterator to this stack that iterates through the items in LIFO order.
     *
     * @return  an iterator to this stack that iterates through the items in LIFO order
     */
    Stack.prototype[Symbol.iterator] = function () {
        var _a = this, first = _a.first, modCount = _a.modCount;
        var current = first;
        var expectModCount = modCount;
        var self = this;
        return {
            next: function () {
                if (expectModCount !== self.modCount) {
                    throw new Error('ConcurrentModificationException');
                }
                if (current !== null) {
                    var result = {
                        done: false,
                        value: current.item,
                    };
                    current = current.next;
                    return result;
                }
                return {
                    done: true,
                    value: null,
                };
            },
        };
    };
    return Stack;
}());
exports.default = Stack;
//# sourceMappingURL=index.js.map
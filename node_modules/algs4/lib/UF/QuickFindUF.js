"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var StdIn_1 = tslib_1.__importDefault(require("../StdIn"));
var StdOut_1 = tslib_1.__importDefault(require("../StdOut"));
/**
 *  The QuickFindUF class represents a <em>union–find data type</em>
 *  (also known as the <em>disjoint-sets data type</em>).
 *  It supports the classic <em>union</em> and <em>find</em> operations,
 *  along with a <em>count</em> operation that returns the total number
 *  of sets.
 *  <p>
 *  The union-find data type models a collection of sets containing
 *  <em>n</em> elements, with each element in exactly one set.
 *  The elements are named 0 through <em>n</em>–1.
 *  Initially, there are <em>n</em> sets, with each element in its
 *  own set. The <em>cannonical elemement</em> of a set
 *  (also known as the <em>root</em>, <em>identifier</em>,
 *  <em>leader</em>, or <em>set representative</em>)
 *  is one distinguished element in the set. Here is a summary of
 *  the operations:
 *  <ul>
 *  <li><em>find</em>(<em>p</em>) returns the canonical element
 *      of the set containing <em>p</em>. The <em>find</em> operation
 *      returns the same value for two elements if and only if
 *      they are in the same set.
 *  <li><em>union</em>(<em>p</em>, <em>q</em>) merges the set
 *      containing element <em>p</em> with the set containing
 *      element <em>q</em>. That is, if <em>p</em> and <em>q</em>
 *      are in different sets, replace these two sets
 *      with a new set that is the union of the two.
 *  <li><em>count</em>() returns the number of sets.
 *  </ul>
 *  <p>
 *  The canonical element of a set can change only when the set
 *  itself changes during a call to <em>union</em>&mdash;it cannot
 *  change during a call to either <em>find</em> or <em>count</em>.
 *  <p>
 *  This implementation uses <em>quick find</em>.
 *  The constructor takes &Theta;(<em>n</em>) time, where <em>n</em>
 *  is the number of sites.
 *  The <em>find</em>, <em>connected</em>, and <em>count</em>
 *  operations take &Theta;(1) time; the <em>union</em> operation
 *  takes &Theta;(<em>n</em>) time.
 *  <p>
 *  For alternative implementations of the same API, see
 *  {@link UF}, {@link QuickUnionUF}, and {@link WeightedQuickUnionUF}.
 *  For additional documentation, see
 *  <a href="https://algs4.cs.princeton.edu/15uf">Section 1.5</a> of
 *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
 */
var QuickFindUF = /** @class */ (function () {
    function QuickFindUF(n) {
        if (!n || typeof n !== 'number' || n < 0) {
            throw new Error("IllegalArgumentException: " + n);
        }
        this.__count = n;
        this.id = new Array(n);
        for (var i = 0; i < n; i++) {
            this.id[i] = i;
        }
    }
    /**
     * Returns the number of components.
     *
     * @return  the number of components (between `1` and `n`)
     */
    QuickFindUF.prototype.count = function () {
        return this.__count;
    };
    /**
     * Returns the component identifier for the component containing site `p`.
     *
     * @param   p the integer representing one site
     * @return  the component identifier for the component containing site `p`
     * @throws IllegalArgumentException unless `0 <= p < n`
     */
    QuickFindUF.prototype.find = function (p) {
        this.validate(p);
        return this.id[p];
    };
    QuickFindUF.prototype.validate = function (p) {
        var n = this.id.length;
        if (p < 0 || p >= n) {
            throw new Error("index " + p + " is not between 0 and " + (n - 1));
        }
    };
    /**
     * Returns true if the the two sites are in the same component.
     *
     * @param   p the integer representing one site
     * @param   q the integer representing the other site
     * @return  `true` if the two sites `p` and `q` are in the same component;
     * `false` otherwise
     * @throws IllegalArgumentException unless
     * both `0 <= p < n` and `0 <= q < n`
     */
    QuickFindUF.prototype.connected = function (p, q) {
        this.validate(p);
        this.validate(q);
        return this.id[p] === this.id[q];
    };
    /**
     * Merges the component containing site `p` with the
     * the component containing site `q`.
     *
     * @param   p the integer representing one site
     * @param   q the integer representing the other site
     * @throws IllegalArgumentException unless
     * both `0 <= p < n` and `0 <= q < n`
     */
    QuickFindUF.prototype.union = function (p, q) {
        this.validate(p);
        this.validate(q);
        var pID = this.id[p];
        var qID = this.id[q];
        if (pID === qID)
            return;
        for (var i = 0; i < this.id.length; i++) {
            if (this.id[i] === pID)
                this.id[i] = qID;
        }
        this.__count--;
    };
    /**
     * Reads in a sequence of pairs of integers (between 0 and n-1) from standard input,
     * where each integer represents some site;
     * if the sites are in different components, merge the two components
     * and print the pair to standard output.
     *
     * @param  args the command-line arguments
     */
    QuickFindUF.main = function ( /* args: string[] */) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var n, uf, p, q;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, StdIn_1.default.readInt()];
                    case 1:
                        n = _a.sent();
                        uf = new QuickFindUF(n);
                        _a.label = 2;
                    case 2:
                        if (!!StdIn_1.default.isEmpty()) return [3 /*break*/, 5];
                        return [4 /*yield*/, StdIn_1.default.readInt()];
                    case 3:
                        p = _a.sent();
                        return [4 /*yield*/, StdIn_1.default.readInt()];
                    case 4:
                        q = _a.sent();
                        if (uf.connected(p, q))
                            return [3 /*break*/, 2];
                        uf.union(p, q);
                        StdOut_1.default.println(p + " " + q);
                        return [3 /*break*/, 2];
                    case 5:
                        StdOut_1.default.println(uf.count() + " components");
                        return [2 /*return*/];
                }
            });
        });
    };
    return QuickFindUF;
}());
exports.default = QuickFindUF;
//# sourceMappingURL=QuickFindUF.js.map
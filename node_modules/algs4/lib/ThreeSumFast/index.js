"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BinarySearch_1 = tslib_1.__importDefault(require("../BinarySearch"));
/**
 *  The `ThreeSumFast` class provides static methods for counting
 *  and printing the number of triples in an array of distinct integers that
 *  sum to 0 (ignoring integer overflow).
 *  <p>
 *  This implementation uses sorting and binary search and takes time
 *  proportional to n^2 log n, where n is the number of integers.
 *  <p>
 *  For additional documentation, see <a href="https://algs4.cs.princeton.edu/14analysis">Section 1.4</a> of
 *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
 */
var ThreeSumFast = /** @class */ (function () {
    function ThreeSumFast() {
    }
    ThreeSumFast.count = function (a, sum) {
        if (sum === void 0) { sum = 0; }
        var sortedA = a.sort();
        if (ThreeSumFast.containsDuplicates(sortedA)) {
            throw new Error('array contains duplicate integers');
        }
        var len = sortedA.length;
        var count = 0;
        for (var i = 0; i < len; i++) {
            for (var j = i + 1; j < len; j++) {
                if (BinarySearch_1.default.rank(sum - (sortedA[i] + sortedA[j]), sortedA) > j) {
                    count += 1;
                }
            }
        }
        return count;
    };
    ThreeSumFast.containsDuplicates = function (a) {
        for (var i = 1; i < a.length; i++) {
            if (a[i] === a[i - 1])
                return true;
        }
        return false;
    };
    return ThreeSumFast;
}());
exports.default = ThreeSumFast;
//# sourceMappingURL=index.js.map
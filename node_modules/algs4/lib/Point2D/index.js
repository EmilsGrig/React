"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var assert_1 = require("../utils/assert");
var StdDraw_1 = tslib_1.__importDefault(require("../StdDraw"));
/**
 *  The Point class is an immutable data type to encapsulate a
 *  two-dimensional point with real-value coordinates.
 *  <p>
 *  Note: in order to deal with the difference behavior of double and
 *  Double with respect to -0.0 and +0.0, the Point2D constructor converts
 *  any coordinates that are -0.0 to +0.0.
 *  <p>
 *  For additional documentation,
 *  see <a href="https://algs4.cs.princeton.edu/12oop">Section 1.2</a> of
 *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
 *
 */
var Point2D = /** @class */ (function () {
    function Point2D(x, y) {
        assert_1.assertSafeNumber(x);
        assert_1.assertSafeNumber(y);
        this._x = x;
        this._y = y;
    }
    Point2D.prototype.x = function () {
        return this._x;
    };
    Point2D.prototype.y = function () {
        return this._y;
    };
    /**
     * Returns the polar radius of this point.
     * @return the polar radius of this point in polar coordinates: sqrt(x*x + y*y)
     */
    Point2D.prototype.r = function () {
        return Math.sqrt(Math.pow(this._x, 2) + Math.pow(this._y, 2));
    };
    /**
     * Returns the angle of this point in polar coordinates.
     * @return the angle (in radians) of this point in polar coordinates (between â€“&pi; and &pi;)
     */
    Point2D.prototype.theta = function () {
        return Math.atan2(this._y, this._x);
    };
    /**
     * Returns the Euclidean distance between this point and that point.
     * @param that the other point
     * @return the Euclidean distance between this point and that point
     */
    Point2D.prototype.distanceTo = function (that) {
        var dx = this._x - that.x();
        var dy = this._y - that.y();
        return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
    };
    /**
     * Plot this point using standard draw.
     */
    Point2D.prototype.draw = function () {
        StdDraw_1.default.point(this._x, this._y);
    };
    /**
     * Return a string representation of this point.
     * @return a string representation of this point in the format (x, y)
     */
    Point2D.prototype.toString = function () {
        return "(" + this._x + ", " + this._y + ")";
    };
    return Point2D;
}());
exports.default = Point2D;
//# sourceMappingURL=index.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var StdRandom_1 = tslib_1.__importDefault(require("../StdRandom"));
var StopWatch_1 = tslib_1.__importDefault(require("../StopWatch"));
var ThreeSumFast_1 = tslib_1.__importDefault(require("../ThreeSumFast"));
var StdOut_1 = tslib_1.__importDefault(require("../StdOut"));
/**
 * The `DoublingTest` class provides a client for measuring
 * the running time of a method using a doubling test.
 * <p>
 * For additional documentation, see <a href="https://algs4.cs.princeton.edu/14analysis">Section 1.4</a>
 * of <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
 *
 */
var DoublingTest = /** @class */ (function () {
    function DoublingTest() {
    }
    /**
     * Returns the amount of time to call `ThreeSum.count()` with <em>n</em>
     * random 6-digit integers.
     * @param  n the number of integers
     * @return  amount of time (in seconds) to call `ThreeSum.count()`
     * with <em>n</em> random 6-digit integers
     */
    DoublingTest.timeTrial = function (n) {
        var a = [];
        for (var i = 0; i < n; i++) {
            a.push(StdRandom_1.default.uniform(-DoublingTest.MAXIMUM_INTEGER, DoublingTest.MAXIMUM_INTEGER));
        }
        var timer = new StopWatch_1.default();
        ThreeSumFast_1.default.count(a);
        return timer.elapsedTime();
    };
    /**
     * Prints table of running times to call `ThreeSum.count()`
     * for arrays of size 250, 500, 1000, 2000, and so forth.
     *
     * @param  args the command-line arguments
     */
    DoublingTest.main = function () {
        for (var n = 250; true; n += n) {
            var time = DoublingTest.timeTrial(n);
            StdOut_1.default.printf('%7d %7.1f\n', n, time);
        }
    };
    DoublingTest.MAXIMUM_INTEGER = 1000000;
    return DoublingTest;
}());
exports.default = DoublingTest;
//# sourceMappingURL=index.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var printf_1 = tslib_1.__importDefault(require("printf"));
/**
 *  The `Accumulator` class is a data type for computing the running
 *  mean, sample standard deviation, and sample variance of a stream of real
 *  numbers. It provides an example of a mutable data type and a streaming
 *  algorithm.
 *  <p>
 *  This implementation uses a one-pass algorithm that is less susceptible
 *  to floating-point roundoff error than the more straightforward
 *  implementation based on saving the sum of the squares of the numbers.
 *  This technique is due to
 *  <a href = "https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Online_algorithm">B. P. Welford</a>.
 *  Each operation takes constant time in the worst case.
 *  The amount of memory is constant - the data values are not stored.
 *  <p>
 *  For additional documentation,
 *  see <a href="https://algs4.cs.princeton.edu/12oop">Section 1.2</a> of
 *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
 */
var Accumulator = /** @class */ (function () {
    function Accumulator() {
        this.n = 0;
        this.sum = 0;
        this.mu = 0;
    }
    /**
     * Adds the specified data value to the accumulator.
     * @param  x the data value
     */
    Accumulator.prototype.addDataValue = function (val) {
        this.n++;
        var delta = val - this.mu;
        this.mu += delta / this.n;
        this.sum += ((this.n - 1) / this.n) * delta * delta;
    };
    /**
     * Returns the mean of the data values.
     * @return the mean of the data values
     */
    Accumulator.prototype.mean = function () {
        return this.mu;
    };
    /**
     * Returns the sample variance of the data values.
     * @return the sample variance of the data values
     */
    Accumulator.prototype.var = function () {
        if (this.n <= 1)
            return Number.NaN;
        return this.sum / (this.n - 1);
    };
    /**
     * Returns the sample standard deviation of the data values.
     * @return the sample standard deviation of the data values
     */
    Accumulator.prototype.stddev = function () {
        return Math.sqrt(this.var());
    };
    /**
     * Returns the number of data values.
     * @return the number of data values
     */
    Accumulator.prototype.count = function () {
        return this.n;
    };
    Accumulator.prototype.toString = function () {
        return "Mean (" + this.n + " values): " + printf_1.default('%7.5f', this.mean()) + ", stddev = " + this.stddev();
    };
    return Accumulator;
}());
exports.default = Accumulator;
//# sourceMappingURL=index.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = require("../utils/assert");
/**
 *  The `Interval1D` class represents a one-dimensional interval.
 *  The interval is <em>closed</em>â€”it contains both endpoints.
 *  Intervals are immutable: their values cannot be changed after they are created.
 *  The class `Interval1D` includes methods for checking whether
 *  an interval contains a point and determining whether two intervals intersect.
 *  <p>
 *  For additional documentation,
 *  see <a href="https://algs4.cs.princeton.edu/12oop">Section 1.2</a> of
 *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
 */
var Interval1D = /** @class */ (function () {
    function Interval1D(min, max) {
        assert_1.assertSafeNumber([min, max]);
        if (max < min) {
            throw new Error('max must greater than min');
        }
        this._min = min;
        this._max = max;
    }
    /**
     * Returns the length of this interval.
     *
     * @return the length of this interval (max - min)
     */
    Interval1D.prototype.length = function () {
        return this._max - this._min;
    };
    /**
     * Returns true if this interval contains the specified value.
     *
     * @param x the value
     * @return true if this interval contains the value x;
     *         false otherwise
     */
    Interval1D.prototype.contains = function (x) {
        return this._min <= x && x <= this._max;
    };
    /**
     * Returns true if this interval intersects the specified interval.
     *
     * @param  that the other interval
     * @return true if this interval intersects the argument interval;
     *         false otherwise
     */
    Interval1D.prototype.intersects = function (that) {
        if (this._max < that._min)
            return false;
        if (that._max < this._min)
            return false;
        return true;
    };
    Interval1D.prototype.min = function () {
        return this._min;
    };
    Interval1D.prototype.max = function () {
        return this._max;
    };
    Interval1D.prototype.draw = function () { };
    return Interval1D;
}());
exports.default = Interval1D;
//# sourceMappingURL=index.js.map
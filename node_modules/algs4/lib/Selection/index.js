"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var assert_1 = tslib_1.__importDefault(require("assert"));
var StdOut_1 = tslib_1.__importDefault(require("../StdOut"));
// import StdIn from '../StdIn';
var StdRandom_1 = tslib_1.__importDefault(require("../StdRandom"));
var types_1 = require("../types");
/**
 *  The `Selection` class provides static methods for sorting an
 *  array using <em>selection sort</em>.
 *  This implementation makes ~ &frac12; <em>n</em><sup>2</sup> compares to sort
 *  any array of length <em>n</em>, so it is not suitable for sorting large arrays.
 *  It performs exactly <em>n</em> exchanges.
 *  <p>
 *  This sorting algorithm is not stable. It uses &Theta;(1) extra memory
 *  (not including the input array).
 *  <p>
 *  For additional documentation, see
 *  <a href="https://algs4.cs.princeton.edu/21elementary">Section 2.1</a>
 *  of <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
 */
var Selection = /** @class */ (function () {
    function Selection() {
    }
    // This class should not be instantiated.
    // private constructor() { }
    /**
     * Rearranges the array in ascending order, using a comparator.
     * @param a the array
     * @param comparator the comparator specifying the order
     */
    Selection.sort = function (a, comparator) {
        var n = a.length;
        for (var i = 0; i < n; i++) {
            var min = i;
            for (var j = i + 1; j < n; j++) {
                if (Selection.less(a[j], a[min], comparator)) {
                    min = j;
                }
            }
            Selection.exch(a, i, min);
            assert_1.default(Selection.isSorted(a, comparator, 0, i));
        }
        assert_1.default(Selection.isSorted(a, comparator));
    };
    /**
     * `sort` method implemented `StringComparator`
     * @param a
     */
    Selection.sortString = function (a) {
        return Selection.sort(a, new types_1.StringComparator());
    };
    /**
     * `sort` method implemented `NumberComparator`
     * @param a
     */
    Selection.sortNumber = function (a) {
        return Selection.sort(a, new types_1.NumberComparator());
    };
    // is v < w ?
    Selection.less = function (v, w, comparator) {
        if (comparator && typeof comparator.compare === 'function') {
            return comparator.compare(v, w) < 0;
        }
        return v.compareTo(w) < 0;
    };
    // exchange a[i] and a[j]
    Selection.exch = function (a, i, j) {
        var swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    };
    /**
     * Check if array is sorted - useful for debugging.
     * Is the array sorted from a[lo] to a[hi]
     */
    Selection.isSorted = function (a, comparator, lo, hi) {
        if (lo === void 0) { lo = 0; }
        if (hi === void 0) { hi = a.length - 1; }
        for (var i = lo + 1; i <= hi; i++) {
            if (Selection.less(a[i], a[i - 1], comparator)) {
                return false;
            }
        }
        return true;
    };
    // print array to standard output
    Selection.show = function (a) {
        for (var i = 0; i < a.length; i++) {
            StdOut_1.default.printf('%-2s', a[i] + " ");
        }
        StdOut_1.default.println();
    };
    /**
     * Reads in a sequence of strings from standard input; selection sorts them;
     * and prints them to standard output in ascending order.
     *
     * @param args the command-line arguments
     */
    Selection.main = function ( /* String[] args */) {
        var a = [];
        for (var index = 0; index < 20; index++) {
            a.push(StdRandom_1.default.uniform(1, 100)
                .toFixed(0)
                .toString());
        }
        console.log('Input:');
        console.log(a.join(' ') + "\n");
        Selection.sort(a, new types_1.StringComparator());
        console.log('Output:');
        Selection.show(a);
    };
    return Selection;
}());
exports.default = Selection;
//# sourceMappingURL=index.js.map